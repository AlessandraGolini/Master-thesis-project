## Extremes
# Compute percentiles along the time dimension for each grid cell
q95_map = keta_rd.reduce(np.nanpercentile, q=95, dim='time')
q10_map = keta_rd.reduce(np.nanpercentile, q=10, dim='time')
median_map = keta_rd.reduce(np.nanpercentile, q=50, dim='time')
#  Frequency map for extreme flooding events
extreme_days = keta_rd['dis24'] > q95_map
extreme_freq_map = extreme_days.sum(dim='time')  # Number of extreme discharge days
# Yearly count of exceedances over 95th percentile

# Step 1: Count exceedance days in each grid cell per year
exceed_count = keta_rd['dis24'].groupby('time.year').apply(lambda x: (x > q95_map).sum(dim='time'))

# Step 2: Take the reference point (5.77°N 0.667°E)
keta_exceed = exceed_count.sel(latitude = 5.77, longitude = 0.667, method='nearest')

# Step 3: Plot
keta_exceed['dis24'].plot(marker='o')
plt.title("Number of Extreme Discharge Days in October (95th Percentile)")
plt.ylabel("Days")
plt.xlabel("Year")
plt.grid()
Spatial map of days with extreme discharge in 2019 (October) in the Volta estuary area
# Extraction of October 2019
oct_2019 = keta_rd['dis24'].sel(time=keta_rd.time.dt.year == 2019)

# Boolean mask: True where dis24 > threshold
extreme_days19 = oct_2019 > q95_map

# Counts the number of extreme days for each grid
extreme_count19 = extreme_days19.sum(dim='time')
extreme_pixel_count = extreme_days19.sum(dim=['latitude', 'longitude'])  # dimensione: time

# Find days when at least 1 pixel exceeds 95° percentile
extreme_days_filtered = extreme_count19.where(extreme_count19 > 0, drop=True)
extreme_pixel_count_filtered = extreme_pixel_count.where(extreme_pixel_count > 0, drop=True)

# List of days with at least 1 pixel > 95°
#days_with_extremes19 = extreme_days_filtered['time'].values
days_with_extremes19 = extreme_pixel_count_filtered['time'].values
print("Days with extreme discharge:", days_with_extremes19)
print("Days with extreme discharge:", days_with_extremes19.size)


# 1. Conta quanti pixel sono >95% ogni giorno
extreme_pixel_count = extreme_days19.sum(dim=['latitude', 'longitude'])

# 2. Applica soglia: giorni con >10 pixel sopra soglia
threshold_n_pixels = 10
extreme_pixel_count_filtered = extreme_pixel_count.where(extreme_pixel_count > threshold_n_pixels, drop=True)

# 3. Estrai solo i giorni “veramente” estremi
days_with_extremes19 = extreme_pixel_count_filtered['time'].values

# 4. Output
print("Giorni con almeno", threshold_n_pixels, "celle estreme:")
print(days_with_extremes19)
print("Totale:", days_with_extremes19.size)

# Plot
fig, ax = plt.subplots(figsize=(10, 8), subplot_kw={'projection': ccrs.PlateCarree()})
ax = plt.axes(projection=ccrs.PlateCarree())

# Scegli una palette efficace: 'Reds', 'viridis', ecc.
extreme_count19['dis24'].plot(
    ax=ax,
    cmap='Reds',
    cbar_kwargs={'label': 'N° giorni > 95° percentile'},
)

# Aggiungi contesto geografico
ax.coastlines()
ax.add_feature(cfeature.RIVERS)
ax.set_extent([0.6, 0.8, 5.7, 5.85])
ax.set_title("Giorni con scarico estremo - Ottobre 2019")
plt.show()
